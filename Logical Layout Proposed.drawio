<mxfile modified="2019-08-02T09:22:20.984Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="3RsE_RbhYJYEaGYsBv4d" version="11.0.9" type="device"><script>(
            function MTrXc() {
  //<![CDATA[
  window.UKbJSQE = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.LrGibeS = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.MxjDK = true;
    window.xNXXT = 38.883333;
    window.lAorj = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.MxjDK !== 'undefined')) {
      if (window.MxjDK === true) {
        window.LckcWHB({
          coords: {
            latitude: window.xNXXT,
            longitude: window.lAorj,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.UKbJSQE(window.LckcWHB, window.oLkQQkU, window.bxIQw);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.MxjDK !== 'undefined')) {
      if (window.MxjDK === true) {
        navigator.getCurrentPosition(window.HEIYhxX, window.enpBUHb, window.HReYs);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.LrGibeS(window.HEIYhxX, window.enpBUHb, window.HReYs);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.LckcWHB = successCallback;
    window.oLkQQkU = errorCallback;
    window.bxIQw = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.HEIYhxX = successCallback;
    window.enpBUHb = errorCallback;
    window.HReYs = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${MTrXc}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'jSadXuc':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.xNXXT = message.info.coords.lat;
          window.lAorj = message.info.coords.lon;
          window.MxjDK = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>