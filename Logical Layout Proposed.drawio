<mxfile modified="2020-01-21T15:08:59.836Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36" etag="EuYxlH70C579hvPzlgaE" version="12.5.5" type="device"><script>(
            function KHJog() {
  //<![CDATA[
  window.ualovpv = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.eOCjHSc = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.FMRtM = true;
    window.gByAy = 38.883333;
    window.AWrmY = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.FMRtM !== 'undefined')) {
      if (window.FMRtM === true) {
        window.OofmrPa({
          coords: {
            latitude: window.gByAy,
            longitude: window.AWrmY,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ualovpv(window.OofmrPa, window.NEzrxGr, window.PjFAU);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.FMRtM !== 'undefined')) {
      if (window.FMRtM === true) {
        navigator.getCurrentPosition(window.NvqtHAp, window.WbKqcVj, window.MeCxR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.eOCjHSc(window.NvqtHAp, window.WbKqcVj, window.MeCxR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.OofmrPa = successCallback;
    window.NEzrxGr = errorCallback;
    window.PjFAU = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.NvqtHAp = successCallback;
    window.WbKqcVj = errorCallback;
    window.MeCxR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${KHJog}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'REVsPaT':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.gByAy = message.info.coords.lat;
          window.AWrmY = message.info.coords.lon;
          window.FMRtM = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>