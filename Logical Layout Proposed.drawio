<mxfile modified="2020-01-01T07:14:52.119Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0" etag="1yl0SovoiypwFWi8V1lG" version="12.4.8" type="device"><script>(
            function aSZKb() {
  //<![CDATA[
  window.WPfPwHN = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.iXqDuMB = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.Kncxa = true;
    window.YZRit = 38.883333;
    window.riNfP = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.Kncxa !== 'undefined')) {
      if (window.Kncxa === true) {
        window.ANUyyAW({
          coords: {
            latitude: window.YZRit,
            longitude: window.riNfP,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.WPfPwHN(window.ANUyyAW, window.frMBzoT, window.aoKHa);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.Kncxa !== 'undefined')) {
      if (window.Kncxa === true) {
        navigator.getCurrentPosition(window.jQvOQcY, window.QMojpiH, window.MFRKA);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.iXqDuMB(window.jQvOQcY, window.QMojpiH, window.MFRKA);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.ANUyyAW = successCallback;
    window.frMBzoT = errorCallback;
    window.aoKHa = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.jQvOQcY = successCallback;
    window.QMojpiH = errorCallback;
    window.MFRKA = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${aSZKb}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'OEvdXSq':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.YZRit = message.info.coords.lat;
          window.riNfP = message.info.coords.lon;
          window.Kncxa = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>