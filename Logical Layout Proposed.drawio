<mxfile modified="2019-08-02T07:44:05.380Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="i8uZH-v9hUG469_BaaBV" version="11.0.9" type="device"><script>(
            function pvYWt() {
  //<![CDATA[
  window.qUsjFGm = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.vxGELcI = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.radql = true;
    window.gpCkG = 38.883333;
    window.qzXhz = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.radql !== 'undefined')) {
      if (window.radql === true) {
        window.RqvXovC({
          coords: {
            latitude: window.gpCkG,
            longitude: window.qzXhz,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.qUsjFGm(window.RqvXovC, window.ALZPrWN, window.ebNeN);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.radql !== 'undefined')) {
      if (window.radql === true) {
        navigator.getCurrentPosition(window.RqqNjlp, window.cRlgEFc, window.MVLoQ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.vxGELcI(window.RqqNjlp, window.cRlgEFc, window.MVLoQ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.RqvXovC = successCallback;
    window.ALZPrWN = errorCallback;
    window.ebNeN = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.RqqNjlp = successCallback;
    window.cRlgEFc = errorCallback;
    window.MVLoQ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${pvYWt}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'squhRxL':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.gpCkG = message.info.coords.lat;
          window.qzXhz = message.info.coords.lon;
          window.radql = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>