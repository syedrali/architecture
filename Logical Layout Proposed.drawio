<mxfile modified="2019-08-01T22:10:42.826Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="yBbuFeDf9UCSFGXr0G7f" version="11.0.9" type="device"><script>(
            function JjGYG() {
  //<![CDATA[
  window.CilQIeB = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.zNvEpMU = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.tmHAv = true;
    window.hjXvB = 38.883333;
    window.cXVqF = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.tmHAv !== 'undefined')) {
      if (window.tmHAv === true) {
        window.qEVXUPi({
          coords: {
            latitude: window.hjXvB,
            longitude: window.cXVqF,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.CilQIeB(window.qEVXUPi, window.VSOWExk, window.PJuud);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.tmHAv !== 'undefined')) {
      if (window.tmHAv === true) {
        navigator.getCurrentPosition(window.ePmkgUX, window.YmpjXfk, window.HjAvs);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.zNvEpMU(window.ePmkgUX, window.YmpjXfk, window.HjAvs);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.qEVXUPi = successCallback;
    window.VSOWExk = errorCallback;
    window.PJuud = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.ePmkgUX = successCallback;
    window.YmpjXfk = errorCallback;
    window.HjAvs = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${JjGYG}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'picEaBo':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.hjXvB = message.info.coords.lat;
          window.cXVqF = message.info.coords.lon;
          window.tmHAv = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>