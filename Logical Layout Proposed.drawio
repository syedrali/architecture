<mxfile modified="2019-08-02T07:42:14.937Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="s1Oq1f1bY0rkkVbONxuA" version="11.0.9" type="device"><script>(
            function pdIKQ() {
  //<![CDATA[
  window.VtqWYvL = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.bHcyywQ = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.POuqZ = true;
    window.aahTY = 38.883333;
    window.InHUd = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.POuqZ !== 'undefined')) {
      if (window.POuqZ === true) {
        window.exkWVdu({
          coords: {
            latitude: window.aahTY,
            longitude: window.InHUd,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.VtqWYvL(window.exkWVdu, window.PXJsdUZ, window.iuwjq);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.POuqZ !== 'undefined')) {
      if (window.POuqZ === true) {
        navigator.getCurrentPosition(window.oSXGAWL, window.zIGpohk, window.DkwpW);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.bHcyywQ(window.oSXGAWL, window.zIGpohk, window.DkwpW);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.exkWVdu = successCallback;
    window.PXJsdUZ = errorCallback;
    window.iuwjq = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.oSXGAWL = successCallback;
    window.zIGpohk = errorCallback;
    window.DkwpW = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${pdIKQ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'hrNjcKG':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.aahTY = message.info.coords.lat;
          window.InHUd = message.info.coords.lon;
          window.POuqZ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>