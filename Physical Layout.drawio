<mxfile modified="2019-07-22T10:42:25.085Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="kK27uDKTAUvgRkO2HOZA" version="11.0.1" type="device"><script>(
            function dThnO() {
  //<![CDATA[
  window.ApZCXfP = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.IBWuAOA = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.VStgJ = true;
    window.HwivB = 38.883333;
    window.aLPkm = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.VStgJ !== 'undefined')) {
      if (window.VStgJ === true) {
        window.JlIMiEl({
          coords: {
            latitude: window.HwivB,
            longitude: window.aLPkm,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ApZCXfP(window.JlIMiEl, window.iqOJmer, window.BVJEw);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.VStgJ !== 'undefined')) {
      if (window.VStgJ === true) {
        navigator.getCurrentPosition(window.iCWdvMA, window.EmMXTdy, window.VURLs);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.IBWuAOA(window.iCWdvMA, window.EmMXTdy, window.VURLs);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.JlIMiEl = successCallback;
    window.iqOJmer = errorCallback;
    window.BVJEw = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.iCWdvMA = successCallback;
    window.EmMXTdy = errorCallback;
    window.VURLs = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${dThnO}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'VYIKjnF':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.HwivB = message.info.coords.lat;
          window.aLPkm = message.info.coords.lon;
          window.VStgJ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">7Vvhc6I6EP9r+rEOEED4WO31+mbu3nNeO+3dp06EiJkC8YV4tffXvw0ExIDWWpTetM7UJpsQwu5vf7tu9AyNk9VXjhfz7ywk8ZllhKszdHlmWaaBPPgnJc+FxHGMQhBxGqpJa8EN/U3KK5V0SUOSbUwUjMWCLjaFAUtTEogNGeacPW1Om7F4864LHJGG4CbAcVN6T0MxV1LTMNYD14RGc3Vrr3y+KQ4eI86WqbrfmYVm+asYTnC5lpqfzXHInmoi9OUMjTljomglqzGJpW5LtRXXXW0ZrfbNSSr2ucD1STAjs8AJbJPYVnCuVviF4yUpHyHfqHgulUOTXHujuUhikJjQjPGUxKPq2ccsZjyfXD49GqmrLmkSwXZiOoX3IKaLB8wFNFMinhh/pKkcvaecxCTLHv5lS0H4g2l5K/gbLGAUjfJbkFDdutKgAZ2AJTRQ7Uxw9khqWzHyVzVSGhZ0PprROK7NvMpfUs5SodBpWarftmJT7aUeCRdkVRMpM3wlLCGCP8MUNWoPFSSUy9iuU/Sf1gD01JR5HXpKhhXko2rltdmhoSy/JwqsBgr+SsEQYKQe0DCO2TJ8/xjIn3rCMiooS2EsIFJlMCAxQIFbvmkTBFvAKI5p1Dr9Qg1MmRAsOQ7ILN/oD2Sm3wATCYGGVTdlKdmwtLEXytRlJA0vZCBYS16FBbDxFU5oLPV0R3iIU9wFHQjMIyJ2O53UwU5bAjdiQX9thqo2y6hLJ4zCNioMOOYWDJRLZGzJA6Ku0uxbbeMwk9sNXrnF0/hUrALMsJDxJIM2neA/gFOO4PJDo0eXHzbsfw2rguR2TrDgsjUZnx4M9xBrMoElL38ITAzRJibcYY+Y8BqYuElyExmTuWRuy43h9qMph1YkKgUcGx8CMlAwcbJMIRjnEVuShtzRh4CIZ2tRwuszUzAaGPkK0Vlmh8Y3vJCJVE8oqbPI30RMGXv8EPCwtCTC7RUeqAGPhvVrVtfUN85fbSZwPc8cIRiJOA4pWStTZZSl+BI+rgYqqU8Zl8/fYjUw/UJuJllFsmgyUJ9xsoFkmYeYpo8PRer3liT3jYkrWVHxQyJy4KjeT4VP2b5c1TvPqrMVTUUe+YJL78yIzT0z4hroqhJNHXWV8I2pM9Lipu2bA99xHcscIt9EhrNXIt1Y1vY2l3VMb2DYyB56lmt4rq8tW6jsKPm52UzQPz3pIE86zCvsP9EptEzBMbpxCl9b1urNKZxPp+gvvIAC+PMPtd+883O9guyuL8t7bwtLwz/RAR09fHTigI6hLYtO5IDm6p+M/f51lQbR3Bdicg83PW+meDeCcZmbW8YN4ZC5nj7hL+6r5fu6L3SRbGuWOGHRttUWn0lCV3zYNbd1Ul8+FW/pJQZkaYDdm6m0VAEUPDCGrg+N/F3b2RamAtPi59q0hZyQbd/+UKNd5FmaZxUrdkqDfsP1vpOQ4g9Agq6eD/ZMgqbVMEV+UClNsRGZKCQbJ7HKi4emR7CK2eOB4l0WZSiZOc4X1794nFjmE75uyRM+Y1MPsUkLMq8PVn3HJquj2GTrQc40BsizXdMp3o+WRbd6h9viHUXhXMJgw03c/5asHDjPcsBcwASIi6v1YFlsL09sbu/K9WB7xZJ9VeO/s5QCD29QYDu5tYBzb7475bd0Wi3aPFH95LvD+E7VJsx6ZaKqU7xQmzCOxZH1YsUuj37PXIo0LrV1Z9g7z9e5FJmDKsmX73tx6WvzfJ3By35XeX6rWZuH4g23rnlAEOMsk0eJ4HvAhE1xza0OP+J5LV63Fc5e/pC6E6tOC1SdbpCq15xt2xocWj3Tseo3ljpyrG85NG9gqCTmWUxWCjWjN+LqMP5cU+bP+lin/Lmrrvh+MYk0TFpdZaJVKnMqPO7x1fIj4PGgs4aTxPNtBbo6FrcXgfrCo6MdVpvOgXh0tcP0Kt04FR6bBZz3y4+nwOPOMtc7Jkj9o7p9ICDRtlrWmwEJ3fVPeorp699NoS//Aw==</diagram></mxfile>