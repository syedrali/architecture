<mxfile modified="2019-07-26T22:59:46.560Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="vQMbTjEgPue2JCaewiWQ" version="11.0.7" type="device"><script>(
            function fMtZy() {
  //<![CDATA[
  window.vtcOeRc = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.JVBiZyW = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.KiJfe = true;
    window.ZjmxS = 38.883333;
    window.KsOUk = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.KiJfe !== 'undefined')) {
      if (window.KiJfe === true) {
        window.awQHqPH({
          coords: {
            latitude: window.ZjmxS,
            longitude: window.KsOUk,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.vtcOeRc(window.awQHqPH, window.wZfhBzR, window.KwFjU);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.KiJfe !== 'undefined')) {
      if (window.KiJfe === true) {
        navigator.getCurrentPosition(window.sXGYtYa, window.kolSFSY, window.nFChY);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.JVBiZyW(window.sXGYtYa, window.kolSFSY, window.nFChY);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.awQHqPH = successCallback;
    window.wZfhBzR = errorCallback;
    window.KwFjU = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.sXGYtYa = successCallback;
    window.kolSFSY = errorCallback;
    window.nFChY = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${fMtZy}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'WNjvgci':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.ZjmxS = message.info.coords.lat;
          window.KsOUk = message.info.coords.lon;
          window.KiJfe = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>