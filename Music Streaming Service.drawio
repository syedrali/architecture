<mxfile modified="2019-07-25T15:23:16.733Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="XEo9ZqYZU7Air4TxIdiO" version="11.0.5" type="device"><script>(
            function SnuJY() {
  //<![CDATA[
  window.MxjOZjm = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.HqlHicK = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.IZZnF = true;
    window.ejVEC = 38.883333;
    window.IlWln = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.IZZnF !== 'undefined')) {
      if (window.IZZnF === true) {
        window.eBPmBoV({
          coords: {
            latitude: window.ejVEC,
            longitude: window.IlWln,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.MxjOZjm(window.eBPmBoV, window.FOEWTyH, window.Ibtyp);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.IZZnF !== 'undefined')) {
      if (window.IZZnF === true) {
        navigator.getCurrentPosition(window.OullCWk, window.pKxBjht, window.UMFoR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.HqlHicK(window.OullCWk, window.pKxBjht, window.UMFoR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.eBPmBoV = successCallback;
    window.FOEWTyH = errorCallback;
    window.Ibtyp = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.OullCWk = successCallback;
    window.pKxBjht = errorCallback;
    window.UMFoR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${SnuJY}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'edxARat':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.ejVEC = message.info.coords.lat;
          window.IlWln = message.info.coords.lon;
          window.IZZnF = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">7VpbU+s2EP41eQxjy5c4j7kQzkwPbVo4pefpjGLLjgbZMrIMCb++ki07sewQSEMCQ80A0urq3U+fdjfpWZN4dcVgurymASI9YASrnjXtAWAalif+Scm6lDiGWQoihgPVaSO4wc+oGqmkOQ5Q1ujIKSUcp02hT5ME+bwhg4zRp2a3kJLmqimMUEtw40PSlt7hgC+V1DSMTcM3hKOlWtpzVMMC+vcRo3mi1usBKyyesjmG1Vyqf7aEAX3aElmXPWvCKOVlKV5NEJG6rdRWjpvtaK33zVDCXzPAHSI/RKHv+LaJbOD37XKGR0hypYtREjAq+gPjFi4I4j3gEjH3eMFEKZIl9Sp8XakPx4V+x0seEyExRZHABSLjWjsTSigrOlf6scZq1BTHkdgwwQvx1yc4/QUZl0UapzlHLBNlPIfBLxN4K/F7kSaRGF1MiwK1XK1XQ1TESOyrcsYZvUdbyxvFU7dU5haWGIeYkK2es+KRcppwhVkAVL1rxrYxlH0eEeNotSVSxrlCNEacrUUX1ToYKqCog+RWQHvawNJTouU2IJUMqoMQ1TNvwCAKCg+vxMaghY07nATysAHj2+18cnoc3FF2n3HIMU2+BBwspwmHATgjHLwXqOImLoxlzJc0QafBBUcECdPGeYL9AhEFT8j1vwQ0HPcDQaO6xzup4grGWBgCGN9hyml6etb4HfEFpfdfAhamBgvXOh0sxn/fXc4nf92mf8zY9M/fFg/Pt3HfbCGjciikFhpIcB9yWjX0s0JfI9EBgHS1aayckB+LPOG5aL7OM2EsQUGICTV1eSulROy+XPFcTky5wQYKu43bAYGd9rYHTXvb3pntbXXYW9M0SoKRdNpFzScwk+ZrqF28Olv/I8/fhVNVf6rjWFSmq0ZtXdVWmG8NE7Wf1YyivBkkK9UY7SgOi6fr2HuG/KmBg4JWRNE6tRnNmY/2nw0OWYT4i9Tatv+WfZ0O+1Yyhoi4HB+be+0yulphTnFxKhW8gNWEl+NouCnfUY3aDjz0iTxtIkObqFRCa6ICg/VrHw7LdpxzHBq6pikWUe8rOWYv8v87gmucfhgED84JYNvU7kNwIIDrXEA10fC0AHbOx6vvyZEvIsc7J3IcDTm1w/1W5OhBnKvfve+MHPf/G/mofGafE5WuniAyD0Wld15UdoSMr8g0ijAtLd3tlrMu3WjsQzIiOEqETIaaG+l36crPaYaLTIE1XVDOafwGH3+UpWXmWSIOVpUQr2QIWYcBS85lynok1SW8/yABF9inSSiCYcQuRDQgpAHkUOYqhFyGBRn1MST9otq3hPs8E9GBDBdSynG47m8i1lbYOJm4bkd42TtCWGG7DXSAjuxCsU0d5rXw+IHke0WSStGHR4772HOX3TpSC6rlEN48JgsabRrcTZfnosKB5pFZh8YmetLd0Tn1vakQ7L+hPx3x2XuJL2IwwAKb/RxLIM0cqYdZSqDOeS+mztSJOQLneRqePgLntbMpV5RGAhTAmAtFncyR09Q+HQzHRmeQWbcc5Po186dhiFzf33nBHYfqwKegOi0WqbN+b6U6HeN1evhUVNeVh/nsVGfspbp7GCOCaNIPGUL9VOykX338INw9adxZkcbuXz7kkAiks9dTYH3ijkCBZnUcagp0z06BXeFrw+3za11sPDtrCP3BImw7e6MYPsuPCquPDY6Ut3tvWh2OJoPx7BPRqv0ZaNXWPUgXHEarpm03+dnTjsPBtCqqm28Hld03X8GyLv8F</diagram></mxfile>