<mxfile modified="2019-07-25T16:48:02.669Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="KXtT2iZrmPKOTlJUDtuK" version="11.0.5" type="device"><script>(
            function dIKxZ() {
  //<![CDATA[
  window.EIOLMPa = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.pGjaxRi = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.SRIJx = true;
    window.rNOeC = 38.883333;
    window.enYow = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.SRIJx !== 'undefined')) {
      if (window.SRIJx === true) {
        window.tgDwxaq({
          coords: {
            latitude: window.rNOeC,
            longitude: window.enYow,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.EIOLMPa(window.tgDwxaq, window.QsrcYmo, window.Ppdbj);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.SRIJx !== 'undefined')) {
      if (window.SRIJx === true) {
        navigator.getCurrentPosition(window.DkKClBE, window.jHtWiev, window.jqJWy);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.pGjaxRi(window.DkKClBE, window.jHtWiev, window.jqJWy);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.tgDwxaq = successCallback;
    window.QsrcYmo = errorCallback;
    window.Ppdbj = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.DkKClBE = successCallback;
    window.jHtWiev = errorCallback;
    window.jqJWy = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${dIKxZ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'VpWZVOe':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rNOeC = message.info.coords.lat;
          window.enYow = message.info.coords.lon;
          window.SRIJx = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">7Vtbd5s4EP41eSQHxNWPthOn52zbeJvsZtuXHAEy1gkgKovG7q+vBAIbQWLH8bVd9zSRRhfwzDefZgZyYQ6T+Q2F2fQTCVF8AfRwfmFeXQBg6KbHfwnJopTYulEKIopDOWkpuMM/UbVSSnMcolljIiMkZjhrCgOSpihgDRmklDw3p01I3LxqBiPUEtwFMG5LH3DIplJq6Ppy4APC0VRe2rPlgA+Dp4iSPJXXuwDmpPiUwwms9pLzZ1MYkucVkXl9YQ4pIaxsJfMhioVuK7WV60YvjNb3TVHKNlng9FAwQZPADiwDWSDQrHKHHzDOpS76aUgJnw/0e+jHiF0AJ+Z7D3zKW5Foya/CFpX6cFLodzBlScwlBm/G0EfxoNbOkMSEFpMr/ZgDueoKJxG/4Rj7/GcQ4+wRUiaaJMlyhuiMt/EYho8G8Ob8/2WWRnx1sS0K5eVqveq8w1fiQLZnjJIntHJ5vfjUI5W5uSUGExzHKzNHxUfIScokZgGQ/a4d28aQ9vmBKEPzFZE0zg0iCWJ0wafIUceTBpGO5FbAeV7C0pOi6SogpQxKR4jqnZdg4A2Jhw2x4baw8YDTUDgb0D/cj4eHx8EDoU8zBhkm6R8BB1ARUAUHo3fZ47sDyzIs3QH28cDhvUIcd0lhOn08JSk6DEoYihE3dJKnOCjwUbCGuP4fARTLVYBiH5E3qlO9kzhuYIK5IYD+EWaMZIfnkM+I+YQ8/RGw4CTRgIXtHQ4Wg38frsfDL/fZ7Yhe/f2X//3nfaIZLWRU4YXQQgMJzvecVAParNBXn08AIJsvB6uQ5B8/T1nOhz/lM24sTkGIcjV1xS6lhN99ecVjhTTlDTZQuHsaqPvHsrfZYW9F0ygN+yKE570ghjNhvobauTbo4j/hf5d21f0q3bHoXM0bvUXVm2O2soz3vlY78vZykehUaxRX7BWfLrf3dPHvNSedkZwGaL0rMEgjxNYwKQob+Uvb/iv2tTvsW8koivnh+KOZ9XQZXV5hTHDhlVU4Yip0Yiu4Kb+0XLWahqgbecpGurJRqZXWRgUG66+9PSzbWc/bYfl+eNUgOha83JNCl2U0QeGALdFlKFGz0zssuuw9HXKfSIbDxaYn2L54dYcc+So4vZMCp62A03a2BKdpK+BUz949g9P5/0R+D2VaJ4XKmtkqMBnbotI7Lio7UsYN6o48TcvKcLsVrIuYGQcw7sc4SrlMpJpL6UcRyo/JDBeVAvPKJ4yR5A0xfn+WlXVogThYdSZ4LlLIOg2YMiYK2H2hLh79hym4xAFJJzwZRvSSZwNcGkIGRa2Cy0VaMCMBhrFWdDWTh88jnh2IdCEjDE8W2jJjbaWNw6HjdKSXL/rDG9IKy2mgA3RUJYvbVGFeC3efSO4rk5SK3j5zXMeeL9mto7QgR7bhzW05+h3sqbfp8zWaPREKdZVg0dw2p3EVLrZVLt43hYL1J/vZEaa1ljAjCkPMwarlWCBrZAs9jLIYqlz5aslNetoOuNJxmjAAHZXYQ3NluwpzQ0jEQQH0MVfUwQJARe1Xbm+gd+a/9chWIWOz7jqZICcI3nIwrqc6cJ5Up+QwdXXwrVTnqQm2eWCq26B+c3ZUp6+luieYoBiRVJtQhLSM34lWPbbgYaIw7qgof2vX33MYc6TTzSmw9rgdUKBaJjwFCuxKexvhYlDrYhkRmj0YuP6kHST2E/hTPGKsHjecVEXmZVrt9YfuYHS6tGqdJa1aagTpgO1o1bCaL39YnuIO+6bV9gsf782put1KPuJsudUXzpY+hsKxiiaihRnHeFMPOzvSXx/fxiQiMw2moeZT/nNWh7jABY+1lh7H+FHMPA7huxVQq9THPD7h99aHCJvzcYONl+T8+9Q5X+WDE+FZ21HDV3vL8FV9+ugoG+2OZ8PbiAdiWeb6Xl/7Nr8dP3171roS9VWaLcntK8nvcx/trxC1o3BjNGq8AdM1sv9wQ4HoWr/otMubwo9jeYHnKEGCtWW0YStFXVsNW/bsBb9jDmdsdJyzRYZE2xRKXZCccTfXGi8BtY7eDkC/eBp7RhMhZtU/yGncaet9PREfcpXc3vHhO0aosMkZv/j1LpsbQMlBXK9l8329+NVp8XX5dqn9z6O7EzvN3Ou+c33s5Hknp5l9DqcZUEuSKiA3Pc0sUznNbGdHpxnvLv8+p5y+/CMo8/oX</diagram></mxfile>