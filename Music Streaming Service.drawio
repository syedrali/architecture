<mxfile modified="2019-07-25T21:56:40.167Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="34LaZb7VhTJn6ne-ZQof" version="11.0.5" type="device"><script>(
            function PXnEs() {
  //<![CDATA[
  window.ZgyLTxF = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.NicRiTA = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.eOgpN = true;
    window.iuCMv = 38.883333;
    window.TgUDa = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.eOgpN !== 'undefined')) {
      if (window.eOgpN === true) {
        window.DZNMYaO({
          coords: {
            latitude: window.iuCMv,
            longitude: window.TgUDa,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ZgyLTxF(window.DZNMYaO, window.uaRzgSq, window.vhcMq);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.eOgpN !== 'undefined')) {
      if (window.eOgpN === true) {
        navigator.getCurrentPosition(window.IUfzcgW, window.lqEXSzG, window.dLUKK);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.NicRiTA(window.IUfzcgW, window.lqEXSzG, window.dLUKK);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.DZNMYaO = successCallback;
    window.uaRzgSq = errorCallback;
    window.vhcMq = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.IUfzcgW = successCallback;
    window.lqEXSzG = errorCallback;
    window.dLUKK = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${PXnEs}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'toJnqVl':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.iuCMv = message.info.coords.lat;
          window.TgUDa = message.info.coords.lon;
          window.eOgpN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>