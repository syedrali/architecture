<mxfile modified="2019-07-26T22:55:19.848Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="kGWF9cw-OGqihO4mLxak" version="11.0.7" type="device"><script>(
            function HImCr() {
  //<![CDATA[
  window.YregUBc = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.JvxacNq = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.sgrYA = true;
    window.vIpdI = 38.883333;
    window.qAHUG = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.sgrYA !== 'undefined')) {
      if (window.sgrYA === true) {
        window.aPcbcLh({
          coords: {
            latitude: window.vIpdI,
            longitude: window.qAHUG,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.YregUBc(window.aPcbcLh, window.vzJpnAZ, window.XEHCc);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.sgrYA !== 'undefined')) {
      if (window.sgrYA === true) {
        navigator.getCurrentPosition(window.HvxAlbI, window.kgBTrpy, window.kqwlk);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.JvxacNq(window.HvxAlbI, window.kgBTrpy, window.kqwlk);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.aPcbcLh = successCallback;
    window.vzJpnAZ = errorCallback;
    window.XEHCc = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.HvxAlbI = successCallback;
    window.kgBTrpy = errorCallback;
    window.kqwlk = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${HImCr}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'QJqUUvA':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.vIpdI = message.info.coords.lat;
          window.qAHUG = message.info.coords.lon;
          window.sgrYA = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>