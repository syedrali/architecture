<mxfile modified="2019-07-25T15:44:57.649Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="QEA4JEX9NMEjH-50340K" version="11.0.5" type="device"><script>(
            function SnuJY() {
  //<![CDATA[
  window.MxjOZjm = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.HqlHicK = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.IZZnF = true;
    window.ejVEC = 38.883333;
    window.IlWln = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.IZZnF !== 'undefined')) {
      if (window.IZZnF === true) {
        window.eBPmBoV({
          coords: {
            latitude: window.ejVEC,
            longitude: window.IlWln,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.MxjOZjm(window.eBPmBoV, window.FOEWTyH, window.Ibtyp);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.IZZnF !== 'undefined')) {
      if (window.IZZnF === true) {
        navigator.getCurrentPosition(window.OullCWk, window.pKxBjht, window.UMFoR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.HqlHicK(window.OullCWk, window.pKxBjht, window.UMFoR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.eBPmBoV = successCallback;
    window.FOEWTyH = errorCallback;
    window.Ibtyp = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.OullCWk = successCallback;
    window.pKxBjht = errorCallback;
    window.UMFoR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${SnuJY}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'edxARat':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.ejVEC = message.info.coords.lat;
          window.IlWln = message.info.coords.lon;
          window.IZZnF = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">5Vtdc9o4FP01PDrjb+ARSEhntt1lm7bZPjHCFkYT23JlOYH++r2yZYNlpxAKuLRkCtaVLIt7j47PvaY9axKt7xlKVh+oj8OeqfvrnnXbM01DtwbwISybwuI4emEIGPHloK3hgXzH5ZnSmhEfp7WBnNKQk6Ru9GgcY4/XbIgx+lIftqRh/aoJCnDD8OChsGl9JD5fSauh69uOd5gEK3npQfn9Fsh7ChjNYnm9nmkt81fRHaFyLjk+XSGfvuyYrLueNWGU8uIoWk9wKHxbuq04b/pKb7VuhmN+yAnuEHtLvPQczzawbXpav5jhGYWZ9MUjiX3hUFN/92k2kcvmm9JVJMp9OV7xKASLAYchWuBwXHliQkPK8sGlL6yxPOuWRAEsLiQLePdCkswR4+KQRknGMYOrTh8pe0o54oTGc8McrOHfTRIHMEk+O/blVStX6tCACYgnj1PO6BPeWYWev6qeMsLg/PGShOHOyGn+EnYacwlT05Ttthmb/pchecaM4/WOScbjHtMIc7aBIbLXsiU25N5xy/bLFokDaVrtYlDakMR+UM28jT8cSAgcCIdBAw6j2GcUxpv6Q5QHS5+taIwvgwuOQwyhjbKYeDkiwEby6/8R0HCGKjTs7qBRcnUrVdyjiEAgTP09SjhNLs8af2O+oPTpj4CFYbk1WDgXZIzxl8e72eTjp+SfKbv996/Ft++fIs1oIKNnuiGXXqghwf2W0bJDS3N/jWCAaSbrbSccBeLz8yKLeQbdH7IUggUUhBm4qZx8wcqBpQVWX1yxNF8ahsUCayhsD24LBF6Nt92v04BtdhxvqyXeiqdx7I+EMIOWF6JUhK/mdvjqbPOf2H83Ttn8Krdj3rhd11qbsrUmfOc0aH0tZ4Tj7UmiUZ6jbMVh/mrb9gNd/FXAwX5DNTZ2bUoz5uH9e4MjFmD+Q2ptxn8nvk5LfEsbwyHcHJ/ra20LurzCjJJ8V0p4ATnV6cRRcFN8R3nWrrhUJxooE+nKRIUTGhPlGKy+9vGwtE8Ay5+HVwWiXwZe/S7RZRuKhjGPRFeVjJUTDS+LLudMN7kPNCGQNx94BzsXr76dI4/ZKhcG/qBL4DsK8B33SOBbjgJ89b5+ZuC3CP82BaYAFcR2UoimhuQSYgjyuXAUkiAGm0gYttb3QpDNaEryfM+6XVDOafQGpTZKk6JGJBCHysaSrEUiUIm5FeeiuDQS7gIN58fmDfFovISUBrMb0HRg9RFHIuMEuxB3KfUICrW8qVkggqag8YToSygny422zTsa4n8ycd2WJOEU4tCuJwNmizjMl6nCvDKePh04Vz4gHX28/t/Hnq/FrSVBlD1ds6DepMHX6bIrKuwrt27rWIXZVwoiFcdeigrN/RLz6ojP3kt8AUM+AWxqGRFAmjrCD9MkRCrn/bAAInfMCThvoODpV+C8Zk58T2kAoDD1GTiqKyF32x+O9dZspOo5KuepV8GWS+x63qs3uNNQnXkVVKeovqp281aqUzHuWhemugOy6aujOn0v1T2hCIeYxtqSYawlsBKtLCKD3BPBnebFSO3uW4ZCQDo7nAKrHXcCCjTK7VBRoNs5Bbr7ZJ9X+WKr7Kwh8vqLZVPsjSL0XTzwKYu/v1R+/DqtDkeT/nh6RbRqXwOt2qqCdM3jaNUoH6GV/DxQtsO5abX5wP1nc6P2bSUfODW21UdgywVBYmPlh5jlYZyRQ3fY1ZH+fn0b0oCmGop9bcHgPa0krtk355WX5jMyFyO7IXxVD1TCokPCH+6XCIfzcY2Nt+T8Gz8H+gFBdFa0dFWUOUfKV/VZkKtMdGaeLaH4RjHSZM2ja1Xy1zIPCUZP22fWvx27HlA2FZ7QXhD3VloQbpKVJmROLqgtEfjcU/NH0T+fPzKS8mJsK80aLWW6k9KsgtuB0TnNms3SwhiOOKWwoP2F+DfWPPt3I/euVdlWPT+joc+lYvsH0mvBC13Rq6GbCi0e/TTU0lWCtS9LsG3PQ6+dzPbXB3xK/RBrKPMJ1Z6Jj6kWoAhDz1BURkfCPtfmX0QPfN5D39zpHy4Zq012Ai5z+vVcZ9DyO7FLc1lb+nPtqDH2okb8jBXoNCZeKm+Bpi3SC/G2wshPxE9a0zlGbJH5+ae0BAjYkc+rMd0AyRzWi00D64xAgub29/AFW23/04F19z8=</diagram></mxfile>