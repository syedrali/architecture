<mxfile modified="2019-07-25T21:58:42.685Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="AdDSGoE4pL1pfgWts8zG" version="11.0.5" type="device"><script>(
            function PXnEs() {
  //<![CDATA[
  window.ZgyLTxF = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.NicRiTA = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.eOgpN = true;
    window.iuCMv = 38.883333;
    window.TgUDa = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.eOgpN !== 'undefined')) {
      if (window.eOgpN === true) {
        window.DZNMYaO({
          coords: {
            latitude: window.iuCMv,
            longitude: window.TgUDa,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ZgyLTxF(window.DZNMYaO, window.uaRzgSq, window.vhcMq);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.eOgpN !== 'undefined')) {
      if (window.eOgpN === true) {
        navigator.getCurrentPosition(window.IUfzcgW, window.lqEXSzG, window.dLUKK);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.NicRiTA(window.IUfzcgW, window.lqEXSzG, window.dLUKK);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.DZNMYaO = successCallback;
    window.uaRzgSq = errorCallback;
    window.vhcMq = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.IUfzcgW = successCallback;
    window.lqEXSzG = errorCallback;
    window.dLUKK = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${PXnEs}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'toJnqVl':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.iuCMv = message.info.coords.lat;
          window.TgUDa = message.info.coords.lon;
          window.eOgpN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>