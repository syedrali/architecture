<mxfile modified="2019-07-26T23:03:42.851Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="Vr2VB8LokJXOhBISyX3H" version="11.0.7" type="device"><script>(
            function mFaBK() {
  //<![CDATA[
  window.nmyUylc = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.vJAcqZR = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.tDDma = true;
    window.yDfth = 38.883333;
    window.wpdDx = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.tDDma !== 'undefined')) {
      if (window.tDDma === true) {
        window.fsZmTVG({
          coords: {
            latitude: window.yDfth,
            longitude: window.wpdDx,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.nmyUylc(window.fsZmTVG, window.IrAvnMH, window.JUCBT);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.tDDma !== 'undefined')) {
      if (window.tDDma === true) {
        navigator.getCurrentPosition(window.sxgTkPF, window.ZZcVLeT, window.ibCqc);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.vJAcqZR(window.sxgTkPF, window.ZZcVLeT, window.ibCqc);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.fsZmTVG = successCallback;
    window.IrAvnMH = errorCallback;
    window.JUCBT = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.sxgTkPF = successCallback;
    window.ZZcVLeT = errorCallback;
    window.ibCqc = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${mFaBK}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'NXtwZKt':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.yDfth = message.info.coords.lat;
          window.wpdDx = message.info.coords.lon;
          window.tDDma = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>