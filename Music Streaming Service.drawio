<mxfile modified="2019-07-25T15:52:46.539Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="ObP2NQutgbvzfktJ4GAo" version="11.0.5" type="device"><script>(
            function dIKxZ() {
  //<![CDATA[
  window.EIOLMPa = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.pGjaxRi = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.SRIJx = true;
    window.rNOeC = 38.883333;
    window.enYow = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.SRIJx !== 'undefined')) {
      if (window.SRIJx === true) {
        window.tgDwxaq({
          coords: {
            latitude: window.rNOeC,
            longitude: window.enYow,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.EIOLMPa(window.tgDwxaq, window.QsrcYmo, window.Ppdbj);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.SRIJx !== 'undefined')) {
      if (window.SRIJx === true) {
        navigator.getCurrentPosition(window.DkKClBE, window.jHtWiev, window.jqJWy);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.pGjaxRi(window.DkKClBE, window.jHtWiev, window.jqJWy);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.tgDwxaq = successCallback;
    window.QsrcYmo = errorCallback;
    window.Ppdbj = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.DkKClBE = successCallback;
    window.jHtWiev = errorCallback;
    window.jqJWy = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${dIKxZ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'VpWZVOe':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rNOeC = message.info.coords.lat;
          window.enYow = message.info.coords.lon;
          window.SRIJx = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">7Vptd6o4EP41fqQHwov60Zfae87e7rq33e3eTz0RIuY0EBpiq/fXbwIBJFC1tlW7XXraJpMXcOaZJzODHXsUra4YTBbXNECkA8xg1bHHHQAs0+6Jf1KyziWuaeWCkOFATaoEN/gXKlYq6RIHKK1N5JQSjpO60KdxjHxek0HG6HN92pyS+l0TGKKG4MaHpCm9wwFfKKllmtXAN4TDhbp1z1UDM+g/hIwuY3W/DrDn2ZUPR7DYS81PFzCgzxsi+7JjjxilPG9FqxEiUreF2vJ1kxdGy+dmKOb7LPD6yJ+jue/6joUc4BtOvsMTJEuli0EcMCrmA/MWzgjiHeARsfdwxkQrlC31Ufi6UB+OMv0OFzwiQmKJJoEzRIaldkaUUJZNLvRjD9WqMY5C8cAEz8Rfn+DkHjIumzRKlhyxVLTxFAb3FuitxO9FEodidbYtCtTtSr2aoiNWYl+1U87oA9q4vZld5UhhbmGJ4RwTsjFzkl1STmOuMAuA6rft2DSGss8TYhytNkTKOFeIRoiztZiiRrsFUNZa/7mCZU+JFpuAVDKoHCEsd67AIBoKD3tio9vAxh2OA+lswPx2Ox0dHwd3lD2kHHJM4y8BB2BqcLD6F32xO3AcyzE94J4OHL0txHETZaYzpwsao+OghCOChKGjZYz9DB8Za8j7fwmgON0z4o3iVG8ljisYYWEIYH6HCafJ8Tnkd8RnlD58CVgIkqjBwu32jgaL4d93l9PRj9vkjwkb//nb7PHXbWRYDWQU4YXUQg0J3uOSFgNGmulrICYAkKyqwSIk+Wu2jPlSDF8vU2EsQUGICTW1xS65RDx9fsdThTT5A9ZQ+P40UPZPZW+7xd6aplEcDGQIL3o+gak0X03tQhts/Y/0vwu36P5U7ph1xqtab130VphvLBO9n8WOol0tkp1ijeaK/exqc/ueKX+2OWlKl8xHu12BQxYivoNJUVDLX5r237Cv22LfQsYQEYfjUz3raTO6usOU4swri3DE1ujE1XCTf2i1ajMN0TfqaRuZ2ka5VhobZRgsP/bhsGxmPa+H5dvhVYLoVPDqnhW6HKsOCg8ciC5Li5q9/nHR5X7QIXdNExys9z3BPopX35Ejt4Kzd1bgdDVwut6B4LRdDZz62fvB4PT+P5HfQpnOWaGyZLYCTNahqOydFpUtKeMedUeRpiV5uN0I1mXMjH1IBgSHsZDJVLOSfpeh/JSmOKsU2OMZ5ZxGr4jxB2mS16El4mDRmeOVTCHLNGDBuSxgD6S6RPQfxOAC+zSei2QYsQuRDQhpADmUtQohl2lBSn0MiZF1DVuEzxORHch0IaEcz9dGlbE20sbRyPNa0ssX/eEVaYXj1dABWqoL2WPqMC+F759IflQmqRR9eOa4iz1fsltLaUGNHMKbb2BBs0mD2+jyTKiwqwV99qG5SVfjVFfn1I+mQrD7hP50xOfsJL6QwQALsBpLLJE1caUeJgmBOudtLZ0pj3kHzutpeDoHzmtWU64oDQUogDkVijpaIKepfdztD83WPLYcOSj0q9dP53Pk+f5rDrjdVAc+J9VpuUhZ5Xst1ekY9+wjU90edZhPR3XmTqp7gBEiiMbGnCFkJOJJjOL1gwj3pHEnWRnbuHxcQiKQzvanwNLj3oECrcI/Sgr0Tk6BbelrLezzS11UkZ3dh353Nm8Ge4MI/pKvCovXBmdVWXmZVvuDUXc4OV9adT4lrTp6BOmBw2jVcpw6P/c0d/hoWm1+ceOtuVG7W6lXlQ23+iHYcoahdKysiVhmxine18M+Henvjm8JDWlqwDgwZkz8TcsQF3TBfaml+ym+lzNPQ/h6POCeQczb3x0i7M/HNTauyPm/U6/cygdnwrNl6bwMX90Dw1f9LaKnbXQwz4pu9Z3MfHr1xVf78l8=</diagram></mxfile>