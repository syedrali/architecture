<mxfile modified="2019-07-25T22:01:07.607Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="mS0noutEsj8O3zd6GDQh" version="11.0.5" type="device"><script>(
            function PXnEs() {
  //<![CDATA[
  window.ZgyLTxF = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.NicRiTA = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.eOgpN = true;
    window.iuCMv = 38.883333;
    window.TgUDa = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.eOgpN !== 'undefined')) {
      if (window.eOgpN === true) {
        window.DZNMYaO({
          coords: {
            latitude: window.iuCMv,
            longitude: window.TgUDa,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ZgyLTxF(window.DZNMYaO, window.uaRzgSq, window.vhcMq);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.eOgpN !== 'undefined')) {
      if (window.eOgpN === true) {
        navigator.getCurrentPosition(window.IUfzcgW, window.lqEXSzG, window.dLUKK);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.NicRiTA(window.IUfzcgW, window.lqEXSzG, window.dLUKK);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.DZNMYaO = successCallback;
    window.uaRzgSq = errorCallback;
    window.vhcMq = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.IUfzcgW = successCallback;
    window.lqEXSzG = errorCallback;
    window.dLUKK = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${PXnEs}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'toJnqVl':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.iuCMv = message.info.coords.lat;
          window.TgUDa = message.info.coords.lon;
          window.eOgpN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>