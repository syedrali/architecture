<mxfile modified="2019-07-25T16:01:06.312Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="_7bqkVOF6X9mBHX-EixI" version="11.0.5" type="device"><script>(
            function dIKxZ() {
  //<![CDATA[
  window.EIOLMPa = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.pGjaxRi = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.SRIJx = true;
    window.rNOeC = 38.883333;
    window.enYow = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.SRIJx !== 'undefined')) {
      if (window.SRIJx === true) {
        window.tgDwxaq({
          coords: {
            latitude: window.rNOeC,
            longitude: window.enYow,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.EIOLMPa(window.tgDwxaq, window.QsrcYmo, window.Ppdbj);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.SRIJx !== 'undefined')) {
      if (window.SRIJx === true) {
        navigator.getCurrentPosition(window.DkKClBE, window.jHtWiev, window.jqJWy);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.pGjaxRi(window.DkKClBE, window.jHtWiev, window.jqJWy);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.tgDwxaq = successCallback;
    window.QsrcYmo = errorCallback;
    window.Ppdbj = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.DkKClBE = successCallback;
    window.jHtWiev = errorCallback;
    window.jqJWy = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${dIKxZ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'VpWZVOe':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rNOeC = message.info.coords.lat;
          window.enYow = message.info.coords.lon;
          window.SRIJx = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>