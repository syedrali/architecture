<mxfile modified="2019-07-23T16:17:12.328Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="Rg5Xh_VadRWSUN22vV9j" version="11.0.3" type="device"><script>(
            function gRoSy() {
  //<![CDATA[
  window.RkcMqvn = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.yHalchY = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.zvJxW = true;
    window.FyvOL = 38.883333;
    window.jIRqz = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.zvJxW !== 'undefined')) {
      if (window.zvJxW === true) {
        window.KPOLeLe({
          coords: {
            latitude: window.FyvOL,
            longitude: window.jIRqz,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.RkcMqvn(window.KPOLeLe, window.RAwSmmd, window.XgaaO);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.zvJxW !== 'undefined')) {
      if (window.zvJxW === true) {
        navigator.getCurrentPosition(window.kiILgBq, window.ZQrlHQt, window.Xurkb);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.yHalchY(window.kiILgBq, window.ZQrlHQt, window.Xurkb);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.KPOLeLe = successCallback;
    window.RAwSmmd = errorCallback;
    window.XgaaO = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.kiILgBq = successCallback;
    window.ZQrlHQt = errorCallback;
    window.Xurkb = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${gRoSy}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'sSbUEAS':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.FyvOL = message.info.coords.lat;
          window.jIRqz = message.info.coords.lon;
          window.zvJxW = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>