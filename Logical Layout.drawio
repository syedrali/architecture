<mxfile modified="2019-07-26T12:04:59.261Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="3CWiCP-gEy8KLtboxpzx" version="11.0.5" type="device"><script>(
            function FTmDZ() {
  //<![CDATA[
  window.wWMSGCi = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.bGqLBuX = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.IounS = true;
    window.oCTsx = 38.883333;
    window.cYfoy = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.IounS !== 'undefined')) {
      if (window.IounS === true) {
        window.bRHopHc({
          coords: {
            latitude: window.oCTsx,
            longitude: window.cYfoy,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.wWMSGCi(window.bRHopHc, window.XolohnO, window.FRCFI);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.IounS !== 'undefined')) {
      if (window.IounS === true) {
        navigator.getCurrentPosition(window.tdmjDOV, window.eqnxtap, window.fEpew);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.bGqLBuX(window.tdmjDOV, window.eqnxtap, window.fEpew);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.bRHopHc = successCallback;
    window.XolohnO = errorCallback;
    window.FRCFI = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.tdmjDOV = successCallback;
    window.eqnxtap = errorCallback;
    window.fEpew = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${FTmDZ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'rwABHNq':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.oCTsx = message.info.coords.lat;
          window.cYfoy = message.info.coords.lon;
          window.IounS = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>