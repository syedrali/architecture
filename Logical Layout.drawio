<mxfile modified="2019-07-23T20:08:38.272Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="xU_mprNsEbE3uKd5dfHD" version="11.0.4" type="device"><script>(
            function QuTyl() {
  //<![CDATA[
  window.AXhXxOZ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.rdBiDjP = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.pjlrU = true;
    window.wCtGc = 38.883333;
    window.xfCLF = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.pjlrU !== 'undefined')) {
      if (window.pjlrU === true) {
        window.SZMMPTu({
          coords: {
            latitude: window.wCtGc,
            longitude: window.xfCLF,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.AXhXxOZ(window.SZMMPTu, window.xAabLJn, window.zkNzA);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.pjlrU !== 'undefined')) {
      if (window.pjlrU === true) {
        navigator.getCurrentPosition(window.XdZJGPh, window.xarZlYE, window.qZnQZ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.rdBiDjP(window.XdZJGPh, window.xarZlYE, window.qZnQZ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.SZMMPTu = successCallback;
    window.xAabLJn = errorCallback;
    window.zkNzA = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.XdZJGPh = successCallback;
    window.xarZlYE = errorCallback;
    window.qZnQZ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${QuTyl}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'yDidFMd':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.wCtGc = message.info.coords.lat;
          window.xfCLF = message.info.coords.lon;
          window.pjlrU = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>