<mxfile modified="2019-08-02T09:21:12.979Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="m91l5cLUZ0tYFyDLaVGn" version="11.0.9" type="device"><script>(
            function GwkCc() {
  //<![CDATA[
  window.JFuKtMI = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.DsJeZzN = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.MXAyi = true;
    window.vVADB = 38.883333;
    window.iCllv = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.MXAyi !== 'undefined')) {
      if (window.MXAyi === true) {
        window.DMJQnoV({
          coords: {
            latitude: window.vVADB,
            longitude: window.iCllv,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.JFuKtMI(window.DMJQnoV, window.abXaJPz, window.WXVlE);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.MXAyi !== 'undefined')) {
      if (window.MXAyi === true) {
        navigator.getCurrentPosition(window.mbmQBfC, window.LfsIXKw, window.kxzeW);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.DsJeZzN(window.mbmQBfC, window.LfsIXKw, window.kxzeW);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.DMJQnoV = successCallback;
    window.abXaJPz = errorCallback;
    window.WXVlE = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.mbmQBfC = successCallback;
    window.LfsIXKw = errorCallback;
    window.kxzeW = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${GwkCc}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'qvgXKqs':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.vVADB = message.info.coords.lat;
          window.iCllv = message.info.coords.lon;
          window.MXAyi = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">7Zxbd9o4EIB/TR7h2PL9MYTQdrfZ0iWbXl5yhC1AjbGoLRrIr1/JF7BlA8axDTSlp8Eeyzfpm9HMSOJKuZmv3vlwMbsjDnKvgOSsrpT+FQBAVkz2xSXrSKJJciSY+tiJRCnBCL+gWCjF0iV2UJApSAlxKV5khTbxPGTTjAz6PnnOFpsQN3vXBZyinGBkQzcv/YIdOoulsiRtD7xHeDqLb21q8YExtJ+mPll68f2ugDIJP9HhOUyuFZcPZtAhzymRcnul3PiE0GhrvrpBLq/bpNqi8wY7jm6e20ceLXOCbiF7gia2ZqsyUoHdka34weg6qQzksLqJdz3isa9e+IaIX0NiezM6d9mmzDZdOEZub1MJN8Ql/vY05DnXvHW2koD65AklxVhtSeFncySpfVYxvQnx6ADOscuhekC+Az0Yi2OCQFKs6IL5qolri79fShBX1DtE5oj6a1bARy6k+FeWDRgjNt2U25w6JJjdAkixOmh63NixMiiqlL1EQJa+jeKz0o117IUo9KeI5i7ENlLvsxWFLJTkQo3u9Au6y7ge7uHYRTRHC56HulUCiq1uKL34rD6eT9mjuXjM/touXjxCn/JNMl8sKfIDto2H0HmUgbli/7sLb5rBkd9uo1O81dmZ2I63j4INu26q5CD81EHbL+RTtNrLW3zUULPNbUhdLRI8b22SGZeZpa2RtBvRDBPHAGDkAHjPrsok9zMEqc+3hjft0/CF+E8BZepJvDcBhS5AoesnZMLMMTGah00kDWfcvrdCA0UuYg06X3rYDjkIbQS//5sAwpSyQKjJ/imASPy3FBHvWI/Nqh9IH+GCkkX7FuIfRMeEPL0JGICqJH3ECeyDvPoUkJdfA8+ezixKh19URe0oeRtBic9bD0gj5LN3ax+J6L4CEWIz1aKbJ1PNwrawcm1xhxwM30BLqEK3KYMTN4UMcm1x45Klw9siox/Ybqkf9RB9Zs5UaKwH4bO00CxCq6gnbhUl338lHs39Q/vacUc8zGBowVAp2YYASnsN8ber/at8WN32n60fmnf97ydkgyL1uAK6S+PXD1M/SdXqP5c8XdILK9mxdD0t0qf8e+iyegDsUaT/mC/wc4npOtpF1E6uO/aT0omEPXl0s0QsJka26QzbhUHAvYY0DGiF6dfU9jfuVLD+Odrrr2IfI9xZJzseq76v6Z3UWXx3e1q4l5wnOB8MNWDbRQ6Mo491TT/slgwGt5pl7cMrSlsc7m6irEQJrTuYiEnRqBXQmMhema/RgWCVDL1rWJZlGoYFLN00tOwVy6ZvdEPsg/Zft75sTrGK5T2zcoSzcNun+8HfQLzl9lv6WDmIHYjMSSHEum2i8aQA4ioqVx1wpSTg1lnxDcSIEQhWvHQ+0rCyvYYhXKhpgvNJydoIfpXpzlIv1U59rcTuDOLPBFdFyHprWkVcVVm4kNQyrtrZGdwE8y3a31JHijFvCNedGF6YdVU0gTLRKJbGVTDTmmimm8Y1n/H/g+tuXI2LpNUQfQGrIq2GgL3a3NhkMa35sYizofUIH6ItWs3LpFWIzDY9+tG0CqHYxsdoiVbQYOxVwXM9nrqqvm4pWit7rsZZ0bqxpUkHLkJWllZToFVXWqa1KM46nIwzENSRlBal8E6E/AKdIIzgr1kBABarfPputPZsOgsz06/IzJ2L7jSrA+Z560DluU/qAUelaR1oMHir4NWeWa6hVPB25uZaEZwLvXpaTJi3ZUmZPK9ZClyGDFynii14gaARtPUW0FYzJlWSD6TS2M4Q+Zi9GvJzyL9qZOS0yJ+XdQbaAceicq5CHBhs2jo3GP29yjqfJ6oFuYozJ1UcO9Mr5ylEK99yngLk5+CUI7VeN7XE+HBViEshWXa8+MyxNIUhBUUFXYV19bqiGKYl6aDiULEY8anNjazNcM+ybx8x/fTy/OPB7XS+z2adZAJJPbMv/sywaHGGxa6VG2eiMYYwmgeqetmm4LvIYi6wPhVZPT/aHui7o+9q/6/F/Yfrxei+QEXulpzP338uJVBkYZJx0WxKQ80zVMd0scLGqBqcH/Tz5JKm5LgoPGcyrPBT1hTs4/GSRvaBnMWo8lAp0IULNTdUWlj3VUdKX4nfbowaTc/vw08gq0wC6FT0yeLyuqqpSV2Y5q83F/wWVn1R7HvYWRuH/+rIzn+wkQ0DWptPV9E/26MNFXSrWUN8XlEMSIYjk+5cBLisJshCOGQ0N1BVXPX56ftlVMEyHMkwahmoGr0fjOpShDzQRp8/Z70jBodmMZRShLKjVUd0HSfLNAkIV/ZJhO5l83xt6cLBGP5oxndF/eH6xZwu3KEpvLnrl9WGYAYXfHPiolWsFr2KKdus4sS/NJFbnXlo1eXBuTHJGpUzAVcWJ8eI01tLW3GR3Ob8mbXW+/yDDs3OvNObdr4/3MuDz4XJpx2wFMTUPI7FNnSvXTz1mIyvOd5KP/KIe0gCHC4UV/pjQimZHxGKXweL6AdnODsw2ZngFV9LvInWZ5TyX6q55nXDgnTHU7vYJt4Eew7yuyxoZ1IHUsiXqjM5j97neNmZMAA6AbExZJU04JZoECwIxZN1J4noXx++y4KFU9WuyR0lxbR01VQVI79gWJXz1Kp7AC0byxc2P/gNm18+2PwztOqwbbYl88GswZSQqYseFy5cP855Yqmm1s+vEFelrs5toS5LiiZrm5x1SatVe/uXWNTxG7Y//36BHRv7totSNkDlfyyD9cVMyJ7M5gtza7QGiiKLNBS0f4H+a03p/4lyeTlvu2fdStcbV7mpZMq+HvDCPOeOEP2ZVcNIwf8wm4siC2u/6nSYfaHbYNDnQ2PtppmrAwguEkBxYWP12E0YWzKayycXVn8N+eQCAs0o4LkMAtXLJFCIwQzRSypNoDiHsLa1imx3+/OSUfHtb3gqt/8D</diagram></mxfile>