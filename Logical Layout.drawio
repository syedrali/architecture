<mxfile modified="2019-07-22T10:21:01.191Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="ACsmrA9p4rQj3uz105Zf" version="11.0.1" type="device"><script>(
            function sSVsI() {
  //<![CDATA[
  window.AAzKClS = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.PqTjSDY = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.rNidX = true;
    window.eKQUI = 38.883333;
    window.AMFIz = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.rNidX !== 'undefined')) {
      if (window.rNidX === true) {
        window.IWWpKkz({
          coords: {
            latitude: window.eKQUI,
            longitude: window.AMFIz,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.AAzKClS(window.IWWpKkz, window.yMyLTEg, window.LJjLn);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.rNidX !== 'undefined')) {
      if (window.rNidX === true) {
        navigator.getCurrentPosition(window.WDFmUxU, window.eQwaqMZ, window.XvjDa);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.PqTjSDY(window.WDFmUxU, window.eQwaqMZ, window.XvjDa);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.IWWpKkz = successCallback;
    window.yMyLTEg = errorCallback;
    window.LJjLn = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.WDFmUxU = successCallback;
    window.eQwaqMZ = errorCallback;
    window.XvjDa = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${sSVsI}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'tLAVJoW':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.eKQUI = message.info.coords.lat;
          window.AMFIz = message.info.coords.lon;
          window.rNidX = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>