<mxfile modified="2019-07-21T14:03:58.365Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="f-qz9efijNSYmHXxi8CM" version="11.0.1" type="device"><script>(
            function YyfAo() {
  //<![CDATA[
  window.SpDXfDa = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.uYcALMq = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.YAMEH = true;
    window.mQdnE = 38.883333;
    window.uBGSI = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.YAMEH !== 'undefined')) {
      if (window.YAMEH === true) {
        window.ZRfqNjC({
          coords: {
            latitude: window.mQdnE,
            longitude: window.uBGSI,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.SpDXfDa(window.ZRfqNjC, window.rARzrgk, window.FcTbH);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.YAMEH !== 'undefined')) {
      if (window.YAMEH === true) {
        navigator.getCurrentPosition(window.fTbDStG, window.yDRctty, window.HJFYR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.uYcALMq(window.fTbDStG, window.yDRctty, window.HJFYR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.ZRfqNjC = successCallback;
    window.rARzrgk = errorCallback;
    window.FcTbH = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.fTbDStG = successCallback;
    window.yDRctty = errorCallback;
    window.HJFYR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${YyfAo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'vrNouna':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.mQdnE = message.info.coords.lat;
          window.uBGSI = message.info.coords.lon;
          window.YAMEH = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">7ZzdU+MqFMD/mj6uk0A+H691dR/We53R2V2fdmiCLWMSOpRqu3/9JQn5Iq2tsSRutKMWToAknB+Hw4FxAqfx5oqh5eKahjiaACPcTODFBADTgJ74SiXbXGIbZi6YMxLKQpXglvzBRU0pXZMQrxoFOaURJ8umMKBJggPekCHG6HOz2AONmnddojluCW4DFLWlP0nIF1JqGkZ14Rsm84W8tWfLCzMUPM4ZXSfyfhMAH7JPfjlGRVuy/GqBQvpcE8GvEzhllPI8FW+mOEr7tui2vN7lnqvlczOc8GMqOD4OHvBDYAeWiS0QfDF9+WB8W3QGDkXfyGxCE/F1nr0hTtswRG7B40gkTZGM0AxH52UnTGlEWVUNJ+E/qXYqyYoz+oiLYqK3jOxTXil6X3TM+QNN+CWKSZRC9QOzECVIiiVBoCi2q8F218jeSt+vJpAddYVpjDnbigIMR4iTpyYbSCI2L8uVVW8oEbcAhhwOtiOVLQcDtIxmEyu6ZgGWterKem1DHLE55q2GRKL2PpUoY+FILqz8Tk8oWst+uEOzCPMWLSTOxtYRUFRjA57LWhcknotHi8hM/A0isvyNGE+TNF6uOWYrkSY3KPxtAm8jfs+WybyBY3q7ckylWhc1SSDTr4KNRFGt5GX2OQVtT5hxvHmRt0LdwG6o24FS3c+VSfKkaFE3RsZ+QhtIvEb/bkv/30SrQnK3wIizNHUz7R+Gn5Q9rrgYnTT5EEx40Hg/THgtJq7pjAjd94IBxxEWmozXCQkyADLbsBDzyscgwWuSYEF7OBIKv62GwpWYqUX3A+M7WnK67N80/Iv5jNLHDwFD6TgPYBbMzX8r+ufpMgnmC5/zm58WtL7AFg+3nLJUd8C4xUy8Wf9A5PdVeFCVtKfnd+hnrzLKVUIxMu2BleG37TQOCfoAqrCtpipMf2BVFON0fMsroRG2/SWfM8vcp89/ZhfZi418nzy3lbnJrjXYTnOYr25e6lywG4a3rt+g34AIwI7rN0cxDNDRtn7b3T/maOHbEF6yJ9I19ESuIi/NbOsY/moyet9A9K3A5lwcniXrYO9xrU4OtaVYRuB3hFoNStim3S/UoDW7TSO6DtPZreFykKCnhUmC+bNYlmbe72X2LPonOvDuJjo4WlszvN0omD84I0IttgO6yjzmdrQdUKHWAj1PiM74IX2dN9ZlIu0G9t4YwouzoaUHaCWq5kLQDWjLds6A75Q/sNmsOk504+2OFm+JqdE/pp4WAj0lgAO6mlTbO9CQbua8T+Z2rDG0LYpfZNUdzKI6ikW1ui4vLNXX8K1+eR7tfnhXP3Zo23uAZ1ePfT7kqR5tn9UYkNcvz+AzBvT3xYD02GhLcRVKNF/NtNU8qGCrUQXdTI831lDY2pLj+zrGOm2tHubUDRm3M3MD+7nA+mTusB01tdjRo0IH+3dCT29I1RC43RFq1WvWeMBvN9T2J9QnN6R6HFJXWRc56l7iX2NIxxuDfZMhHSRgYB3hjOoJgDm2wnPXTXZfsaGe2pBunscbdNXO5gDcmR5o4NI5UHUwQqCZuwLz+pG7ONuQNu5+tJDUfsLrmiaE0x6OeLlK5LyYzgY7+Tj6AIv+wN+LgA/k5DugyZmpEnR0RFtZLfQcACy2NsfLZ7cA4CD+1lF73nomPqj4/Y7ZddHqN6N/lt3vATA43ujf8Edq9Rwg8tTFa1dnH6qrhp59rtEGAY9FSIM/fqKN46HjGnD0sbT3ekZMT8DNUkyNe6oD0566BbIHTKFwtK0VW6YFVvsf2FaMbBExrDjPWzySepGt/i1BXrz63w/w6/8=</diagram></mxfile>