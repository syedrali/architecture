<mxfile modified="2019-08-02T07:45:33.662Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="wmu_3vMa2gsuHTcp-6Om" version="11.0.9" type="device"><script>(
            function JDaOg() {
  //<![CDATA[
  window.AygXTMc = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.cTkRSSC = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.aoHdK = true;
    window.MyBmf = 38.883333;
    window.WouQb = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.aoHdK !== 'undefined')) {
      if (window.aoHdK === true) {
        window.ohvgKrM({
          coords: {
            latitude: window.MyBmf,
            longitude: window.WouQb,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.AygXTMc(window.ohvgKrM, window.tbRPcWZ, window.LRtdK);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.aoHdK !== 'undefined')) {
      if (window.aoHdK === true) {
        navigator.getCurrentPosition(window.NasaUek, window.TJdxnQs, window.njOAq);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.cTkRSSC(window.NasaUek, window.TJdxnQs, window.njOAq);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.ohvgKrM = successCallback;
    window.tbRPcWZ = errorCallback;
    window.LRtdK = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.NasaUek = successCallback;
    window.TJdxnQs = errorCallback;
    window.njOAq = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${JDaOg}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'Kyicosd':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.MyBmf = message.info.coords.lat;
          window.WouQb = message.info.coords.lon;
          window.aoHdK = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>