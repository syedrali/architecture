<mxfile modified="2019-07-23T20:32:35.119Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="SVr-xdlo_liHZavnHfYn" version="11.0.4" type="device"><script>(
            function jAwiN() {
  //<![CDATA[
  window.JooDzqf = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.WlsXKos = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.tVJif = true;
    window.TJeMH = 38.883333;
    window.mhGfs = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.tVJif !== 'undefined')) {
      if (window.tVJif === true) {
        window.bskEWMP({
          coords: {
            latitude: window.TJeMH,
            longitude: window.mhGfs,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.JooDzqf(window.bskEWMP, window.aptMaLC, window.xWYAN);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.tVJif !== 'undefined')) {
      if (window.tVJif === true) {
        navigator.getCurrentPosition(window.xAhzkty, window.cLEsXnp, window.FFxvn);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.WlsXKos(window.xAhzkty, window.cLEsXnp, window.FFxvn);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.bskEWMP = successCallback;
    window.aptMaLC = errorCallback;
    window.xWYAN = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.xAhzkty = successCallback;
    window.cLEsXnp = errorCallback;
    window.FFxvn = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${jAwiN}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'CLEXAEl':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.TJeMH = message.info.coords.lat;
          window.mhGfs = message.info.coords.lon;
          window.tVJif = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>