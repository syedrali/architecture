<mxfile modified="2019-08-01T15:12:40.903Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="FvwfxlXhbvr72_PUB6-q" version="11.0.9" type="device"><script>(
            function fKBxY() {
  //<![CDATA[
  window.xYMrEvZ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.bMeHhtS = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.IYqiu = true;
    window.zSojC = 38.883333;
    window.yLxWL = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.IYqiu !== 'undefined')) {
      if (window.IYqiu === true) {
        window.kjumkxP({
          coords: {
            latitude: window.zSojC,
            longitude: window.yLxWL,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.xYMrEvZ(window.kjumkxP, window.pXNCDQY, window.OpwPu);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.IYqiu !== 'undefined')) {
      if (window.IYqiu === true) {
        navigator.getCurrentPosition(window.ZQFeZmn, window.oOlUeOA, window.LfpNT);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.bMeHhtS(window.ZQFeZmn, window.oOlUeOA, window.LfpNT);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.kjumkxP = successCallback;
    window.pXNCDQY = errorCallback;
    window.OpwPu = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.ZQFeZmn = successCallback;
    window.oOlUeOA = errorCallback;
    window.LfpNT = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${fKBxY}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'mKPscbA':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.zSojC = message.info.coords.lat;
          window.yLxWL = message.info.coords.lon;
          window.IYqiu = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>