<mxfile modified="2019-07-23T12:56:29.812Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="ygu0H3CjAaPlNrAYHTXm" version="11.0.2" type="device"><script>(
            function FQUSJ() {
  //<![CDATA[
  window.Tdjrzuj = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.RanufNG = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.fGEUw = true;
    window.XGQSM = 38.883333;
    window.CTvCO = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.fGEUw !== 'undefined')) {
      if (window.fGEUw === true) {
        window.qsGZCPo({
          coords: {
            latitude: window.XGQSM,
            longitude: window.CTvCO,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.Tdjrzuj(window.qsGZCPo, window.tEwUfzR, window.JdyQU);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.fGEUw !== 'undefined')) {
      if (window.fGEUw === true) {
        navigator.getCurrentPosition(window.whxVYfs, window.hitLBFg, window.CeeKK);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.RanufNG(window.whxVYfs, window.hitLBFg, window.CeeKK);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.qsGZCPo = successCallback;
    window.tEwUfzR = errorCallback;
    window.JdyQU = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.whxVYfs = successCallback;
    window.hitLBFg = errorCallback;
    window.CeeKK = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${FQUSJ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'xxbQVEk':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.XGQSM = message.info.coords.lat;
          window.CTvCO = message.info.coords.lon;
          window.fGEUw = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>