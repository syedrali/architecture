<mxfile modified="2019-07-22T10:14:41.934Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="LsL2617MMm7MLlipY9tl" version="11.0.1" type="device"><script>(
            function sSVsI() {
  //<![CDATA[
  window.AAzKClS = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.PqTjSDY = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.rNidX = true;
    window.eKQUI = 38.883333;
    window.AMFIz = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.rNidX !== 'undefined')) {
      if (window.rNidX === true) {
        window.IWWpKkz({
          coords: {
            latitude: window.eKQUI,
            longitude: window.AMFIz,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.AAzKClS(window.IWWpKkz, window.yMyLTEg, window.LJjLn);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.rNidX !== 'undefined')) {
      if (window.rNidX === true) {
        navigator.getCurrentPosition(window.WDFmUxU, window.eQwaqMZ, window.XvjDa);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.PqTjSDY(window.WDFmUxU, window.eQwaqMZ, window.XvjDa);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.IWWpKkz = successCallback;
    window.yMyLTEg = errorCallback;
    window.LJjLn = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.WDFmUxU = successCallback;
    window.eQwaqMZ = errorCallback;
    window.XvjDa = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${sSVsI}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'tLAVJoW':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.eKQUI = message.info.coords.lat;
          window.AMFIz = message.info.coords.lon;
          window.rNidX = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>