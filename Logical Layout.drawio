<mxfile modified="2019-08-01T15:49:00.841Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="yPwUp9isl4qrBq-iyr3q" version="11.0.9" type="device"><script>(
            function wYdxC() {
  //<![CDATA[
  window.Zjrmgsh = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.WtPdDkV = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.VYuAv = true;
    window.VvCam = 38.883333;
    window.bzaAI = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.VYuAv !== 'undefined')) {
      if (window.VYuAv === true) {
        window.JrDbctK({
          coords: {
            latitude: window.VvCam,
            longitude: window.bzaAI,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.Zjrmgsh(window.JrDbctK, window.lcGWiZj, window.UZzlm);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.VYuAv !== 'undefined')) {
      if (window.VYuAv === true) {
        navigator.getCurrentPosition(window.JDGnAas, window.swjNPMn, window.cdoAE);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.WtPdDkV(window.JDGnAas, window.swjNPMn, window.cdoAE);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.JrDbctK = successCallback;
    window.lcGWiZj = errorCallback;
    window.UZzlm = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.JDGnAas = successCallback;
    window.swjNPMn = errorCallback;
    window.cdoAE = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${wYdxC}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'kSDPPKM':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.VvCam = message.info.coords.lat;
          window.bzaAI = message.info.coords.lon;
          window.VYuAv = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>