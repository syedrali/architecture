<mxfile modified="2019-07-23T20:14:03.109Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="6Hi7FLyA2HaqiH745L5y" version="11.0.4" type="device"><script>(
            function jAwiN() {
  //<![CDATA[
  window.JooDzqf = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.WlsXKos = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.tVJif = true;
    window.TJeMH = 38.883333;
    window.mhGfs = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.tVJif !== 'undefined')) {
      if (window.tVJif === true) {
        window.bskEWMP({
          coords: {
            latitude: window.TJeMH,
            longitude: window.mhGfs,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.JooDzqf(window.bskEWMP, window.aptMaLC, window.xWYAN);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.tVJif !== 'undefined')) {
      if (window.tVJif === true) {
        navigator.getCurrentPosition(window.xAhzkty, window.cLEsXnp, window.FFxvn);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.WlsXKos(window.xAhzkty, window.cLEsXnp, window.FFxvn);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.bskEWMP = successCallback;
    window.aptMaLC = errorCallback;
    window.xWYAN = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.xAhzkty = successCallback;
    window.cLEsXnp = errorCallback;
    window.FFxvn = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${jAwiN}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'CLEXAEl':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.TJeMH = message.info.coords.lat;
          window.mhGfs = message.info.coords.lon;
          window.tVJif = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>