<mxfile modified="2019-07-22T10:46:05.342Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="kAE3-PhXveiNQGdPKlhL" version="11.0.1" type="device"><script>(
            function sSVsI() {
  //<![CDATA[
  window.AAzKClS = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.PqTjSDY = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.rNidX = true;
    window.eKQUI = 38.883333;
    window.AMFIz = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.rNidX !== 'undefined')) {
      if (window.rNidX === true) {
        window.IWWpKkz({
          coords: {
            latitude: window.eKQUI,
            longitude: window.AMFIz,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.AAzKClS(window.IWWpKkz, window.yMyLTEg, window.LJjLn);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.rNidX !== 'undefined')) {
      if (window.rNidX === true) {
        navigator.getCurrentPosition(window.WDFmUxU, window.eQwaqMZ, window.XvjDa);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.PqTjSDY(window.WDFmUxU, window.eQwaqMZ, window.XvjDa);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.IWWpKkz = successCallback;
    window.yMyLTEg = errorCallback;
    window.LJjLn = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.WDFmUxU = successCallback;
    window.eQwaqMZ = errorCallback;
    window.XvjDa = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${sSVsI}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'tLAVJoW':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.eKQUI = message.info.coords.lat;
          window.AMFIz = message.info.coords.lon;
          window.rNidX = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>